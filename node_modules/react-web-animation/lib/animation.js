'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _react = require('react');

var _react2 = _interopRequireDefault(_react);

var _animatable = require('./animatable');

var _animatable2 = _interopRequireDefault(_animatable);

var _lodash = require('lodash.assign');

var _lodash2 = _interopRequireDefault(_lodash);

var _lodash3 = require('lodash.isequal');

var _lodash4 = _interopRequireDefault(_lodash3);

var _playable = require('./mixins/playable');

var _playable2 = _interopRequireDefault(_playable);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/**
 * <Animation/> is a simple implementation of <Animatable/> and controls a single
 * "player" instance for the wrapped element.
 */

var Animation = function (_Animatable) {
    _inherits(Animation, _Animatable);

    function Animation() {
        _classCallCheck(this, Animation);

        var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Animation).call(this));

        _this.state = {
            player: null
        };
        return _this;
    }

    /**
     * Start the animation and set the player in the state
     */


    _createClass(Animation, [{
        key: 'startAnimation',
        value: function startAnimation() {
            return this.setPlayer(this.node.animate(this.keyframes, this.timing));
        }
    }, {
        key: 'componentWillReceiveProps',
        value: function componentWillReceiveProps(nextProps) {
            var timing = nextProps.timing;
            var keyframes = nextProps.keyframes;

            // create data structures for props

            if (timing && keyframes) {
                var newTiming = Object.assign({}, timing);

                if (!(0, _lodash4.default)(keyframes, this.keyframes) || !(0, _lodash4.default)(newTiming, this.timing)) {
                    this.timing = newTiming;
                    this.keyframes = keyframes;
                    // start the new animation with the new config
                    this.startAnimation();
                }
            }

            this.updatePlayer(nextProps);
        }
    }, {
        key: 'componentDidMount',
        value: function componentDidMount() {
            var _props = this.props;
            var timing = _props.timing;
            var keyframes = _props.keyframes;

            // create data structures for props

            this.keyframes = keyframes;
            this.timing = Object.assign({}, timing);

            // start the animation
            var player = this.startAnimation();
            // But make sure that we honor the initial playState, if set.
            this.updatePlayer(this.props, player);
        }
    }, {
        key: 'render',
        value: function render() {
            var _this2 = this;

            var _props2 = this.props;
            var children = _props2.children;
            var getRef = _props2.getRef;


            this.element = _react2.default.cloneElement(children, {
                ref: function ref(node) {
                    _this2.node = node;
                    if (getRef) {
                        getRef(node);
                    }
                    return node;
                }
            });

            return _react.Children.only(this.element);
        }
    }]);

    return Animation;
}(_animatable2.default);

(0, _lodash2.default)(Animation.prototype, _playable2.default);

Animation.propTypes = (0, _lodash2.default)({}, _animatable2.default.propTypes, {
    onCancel: _react.PropTypes.func,
    onFinish: _react.PropTypes.func,
    onPause: _react.PropTypes.func,
    onPlay: _react.PropTypes.func,
    onReverse: _react.PropTypes.func,
    currentTime: _react.PropTypes.number,
    playState: _react.PropTypes.oneOf(['running', 'paused', 'finished', 'idle', 'reversed'])
});

exports.default = Animation;